package com.toydbbackend.springbootserver.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.toydbbackend.springbootserver.model.Book;
import com.toydbbackend.springbootserver.repository.BookRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/book") // This means URL's start with /book (after Application path)

public class BookController {
    private static final Logger log = LoggerFactory.getLogger(BookController.class);

    @Autowired // This means to get the bean called bookRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Book> getAllBooks() {
        // This returns a JSON or XML with the books
        return bookRepository.findAll();
    }

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewBook(@RequestBody Book bookRequest) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        try {
            log.info("Saving new book: {}", bookRequest);

            Book n = new Book();
            n.setBook_no(bookRequest.getBook_no());
            n.setTitle(bookRequest.getTitle());
            n.setAuthor(bookRequest.getAuthor());
            n.setPublisher(bookRequest.getPublisher());
            bookRepository.save(n);

            log.info("Book saved successfully");

            return "Saved";
        // BUG: never catches exception even if there's a violation on primary key for Table 'book'
        } catch (Exception e) {
            log.error("Error saving book", e);
            return "Error: " + e.getMessage();
        }
    }

}
