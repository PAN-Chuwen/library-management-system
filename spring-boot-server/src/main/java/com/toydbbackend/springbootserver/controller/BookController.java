package com.toydbbackend.springbootserver.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.toydbbackend.springbootserver.model.Book;
import com.toydbbackend.springbootserver.repository.BookRepository;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/book") // This means URL's start with /book (after Application path)

public class BookController {
    private static final Logger log = LoggerFactory.getLogger(BookController.class);

    @Autowired // This means to get the bean called bookRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @GetMapping(path = "/get")
    public ResponseEntity<Iterable<Book>> getAllBooks(@RequestParam(required = false) String bookID) {
        if (bookID != null && !bookID.isEmpty()) {
            List<Book> filteredBooks = bookRepository.findByBookID(bookID);
            if (filteredBooks.isEmpty()) {
                return ResponseEntity.notFound().build();
            } else {
                return ResponseEntity.ok(filteredBooks);
            }
        } else {
            Iterable<Book> allBooks = bookRepository.findAll();
            return ResponseEntity.ok(allBooks);
        }
    }

    // TODO: fix this, Posting book records with same 'bookID' updates the content
    // instead of returning error
    @PostMapping(path = "/add") // Map ONLY POST Requests
    public ResponseEntity<?> addNewBook(@RequestBody Book bookRequest) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        try {
            log.info("Saving new book: {}", bookRequest);

            Book n = new Book();
            n.setBookID(bookRequest.getBookID());
            n.setTitle(bookRequest.getTitle());
            n.setAuthor(bookRequest.getAuthor());
            n.setPublisher(bookRequest.getPublisher());
            bookRepository.saveAndFlush(n);

            log.info("Book saved successfully");

            return ResponseEntity.ok("Book saved successfully");
            // BUG: never catches exception even if there's a violation on primary key for
            // Table 'book'
        } catch (DataIntegrityViolationException e) {
            log.error("Error saving book", e);
            return ResponseEntity.badRequest().body("Error saving book");
        }
    }

}
